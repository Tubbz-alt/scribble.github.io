module src.SupplierInfoExplicit;


type <xsd> "UserName" from "AUTH.xsd" as username;
type <xsd> "Password" from "AUTH.xsd" as password;
type <xsd> "UUID" from "AUTH.xsd" as uuid;
type <xsd> "/retailhub/supplierdetails" from "Retailer.xsd" as supplierdetails;
type <xsd> "/retailhub/contractdetails" from "Retailer.xsd" as contractdetails;

type <xsd> "..." from "...xsd" as usercontext;
type <xsd> "..." from "...xsd" as filters;


explicit global protocol PartnershipSupplier
(
	role loginsvc,
	role requestor,
	role authorisersvc,
	role filtersvc,
	role suppliersvc,
	role contractsvc
)
{
	connect requestor to loginsvc;
	login(username, password) from requestor to loginsvc;
	choice at loginsvc
	{
		//loginsuccess() from loginsvc to requestor;  // Not an error if the following line commented (and fairness assumed)
		loginfailure() from loginsvc to requestor;
		/*connect requestor to authorisersvc;
		getsuppliers(uuid) from requestor to authorisersvc;  // Error: orphans*/
		disconnect requestor and loginsvc;
	}
	or
	{
		loginsuccess() from loginsvc to requestor;
		//disconnect requestor and loginsvc;
		connect requestor to authorisersvc;
		connect authorisersvc to filtersvc;
		connect authorisersvc to suppliersvc;
		connect authorisersvc to contractsvc;
		do Main(requestor, authorisersvc, filtersvc, suppliersvc, contractsvc);
	}
}


aux global protocol Main
(
	role requestor,
	role authorisersvc,
	role filtersvc,
	role suppliersvc,
	role contractsvc
)
{
	choice at requestor
	{
		// GET SUPPLIER INFO
		getsuppliers(uuid) from requestor to authorisersvc;
		//1() from authorisersvc to contractsvc;
		do SuppInfo(requestor, authorisersvc, filtersvc, suppliersvc);
	}
	or
	{
		// GET CONTRACT INFO
		getcontracts() from requestor to authorisersvc;
		//2() from authorisersvc to suppliersvc;
		do ContractInfo(requestor, authorisersvc, filtersvc, contractsvc);
		//do ContractInfo(requestor, authorisersvc, filtersvc, suppliersvc);  // Error
	}
	do Main(requestor, authorisersvc, filtersvc, suppliersvc, contractsvc);
}


aux global protocol SuppInfo
(
	role requestor,
	role authorisersvc,
	role filtersvc,
	role suppliersvc
)
{
	choice at authorisersvc
	{
		// DENIED
		deny() from authorisersvc to requestor;
	}
	or
	{
		// PREPARE FILTERED SUPPLIER INFO FOR REQUESTOR
		getsuppliers() from authorisersvc to suppliersvc;
		suppliers() from suppliersvc to authorisersvc;
		do FilterInfo
				<filterSupplier(usercontext, filters, supplierdetails)>
				(authorisersvc, filtersvc);
		suppliers() from authorisersvc to requestor;
	}
}


aux global protocol ContractInfo
(
	role requestor,
	role authorisersvc,
	role filtersvc,
	role contractsvc
)
{
	choice at authorisersvc
	{
		// DENIED
		deny() from authorisersvc to requestor;
	}
	or
	{
		// PREPARE FILTERED SUPPLIER INFO FOR REQUESTOR
		getcontracts() from authorisersvc to contractsvc;
		contracts() from contractsvc to authorisersvc;
		do FilterInfo
				<filterContract(usercontext, filters, contractdetails)>
				//<filterSupplier(usercontext, filters, supplierdetails)>  // OK (merge)
				//<filterSupplier(usercontext, filters, contractdetails)>  // Error
				(authorisersvc, filtersvc);
		contracts() from authorisersvc to requestor;
	}
}


//aux global protocol FilterInfo<type details>(  // Bad non-det. payload
aux global protocol FilterInfo
<
	sig Query
>
(
	role authorisersvc,
	role filtersvc
)
{
	//filter(usercontext, filters, details) from authorisersvc to filtersvc;
	Query from authorisersvc to filtersvc;
	filtered() from filtersvc to authorisersvc;
}

